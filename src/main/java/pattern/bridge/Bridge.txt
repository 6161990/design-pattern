### [Bridge Pattern 의 핵심]
* 기능-구현 간의 결합도가 낮아지고, 기능이 구현에 얽매이지 않는다.
* 구현 클래스를 런타임시 결정할 수 있다(지연 바인딩)
* 구현이 변경되더라도 기능 클래스 부분에 대한 컴파일이 필요없다.
* OCP 와 캡슐화가 지켜지는 듯 하다. how?
 기능과 구현은 '독립적'으로 확장되고, -> OCP
 클라이언트 기능의 인터페이스를 사용하므로 구체구현 방식은 내부로 숨겨진다 -> 캡슐화


### [Bridge Pattern 의 효용]
* 기능에 대한 여러가지 구현 방식을 다양하게 적용해보고 싶을 때
* 기능과 구현을 따로 확장하고 싶을 때

### [기타]
* 어댑터 패턴과도 비슷하게 여겨진다.
* 내부적으로 abstract factory 가 함께 구현된다.